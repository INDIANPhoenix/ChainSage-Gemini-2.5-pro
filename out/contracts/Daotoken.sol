// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";

/**
 * @title Daotoken
 * @dev Create a governance token called DAOToken with voting capabilities and emergency pause functionality...
 *
 * Generated by ChainSage at 2025-09-25T18:18:30.986103
 * Security features: pausable, votes
 */
contract Daotoken is ERC20, Ownable, Pausable, ERC20Votes {

    constructor(address initialOwner)
        ERC20("Daotoken", "DAOT")
        Ownable(initialOwner)
        ERC20Permit(name())
    {
        // Initial supply can be minted here if needed
        // _mint(initialOwner, initialSupply);
    }

    /**
     * @dev Pause all token transfers. Only callable by owner.
     */
    function pause() public onlyOwner {
        _pause();
    }

    /**
     * @dev Unpause all token transfers. Only callable by owner.
     */
    function unpause() public onlyOwner {
        _unpause();
    }

    /**
     * @dev Override required by Pausable extension.
     */
    function _update(address from, address to, uint256 value)
        internal
        override
        whenNotPaused
    {
        super._update(from, to, value);
    }

}