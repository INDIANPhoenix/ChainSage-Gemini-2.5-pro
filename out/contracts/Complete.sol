// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

/**
 * @title Complete
 * @dev Custom contract generated from: Create a complete DAO governance system with treasury management, proposal votin...
 * Generated by ChainSage
 */
contract Complete is Ownable, ReentrancyGuard {

    // State variables
    mapping(address => uint256) public userBalances;
    uint256 public totalBalance;

    // Events
    event Deposit(address indexed user, uint256 amount);
    event Withdrawal(address indexed user, uint256 amount);

    constructor(address initialOwner) Ownable(initialOwner) {}

    /**
     * @dev Deposit funds to the contract
     */
    function deposit() public payable nonReentrant {
        require(msg.value > 0, "Must send some ether");

        userBalances[msg.sender] += msg.value;
        totalBalance += msg.value;

        emit Deposit(msg.sender, msg.value);
    }

    /**
     * @dev Withdraw funds from the contract
     */
    function withdraw(uint256 amount) public nonReentrant {
        require(userBalances[msg.sender] >= amount, "Insufficient balance");

        userBalances[msg.sender] -= amount;
        totalBalance -= amount;

        (bool success, ) = payable(msg.sender).call{value: amount}("");
        require(success, "Transfer failed");

        emit Withdrawal(msg.sender, amount);
    }

    /**
     * @dev Get user balance
     */
    function getUserBalance(address user) public view returns (uint256) {
        return userBalances[user];
    }
}